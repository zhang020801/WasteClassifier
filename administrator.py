# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'administrator.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

## 加载界面设计交互使用的库
from PyQt5 import QtCore, QtGui, QtWidgets
from PySide2.QtCore import QMetaObject
from PySide2.QtWidgets import  QPushButton,  QWidget, QLabel, QWidget,QMenuBar,QStatusBar
from PySide2 import QtGui
import time
import cv2
#加载训练所需要的库
import tensorflow as tf
import tensorflow_hub as hub
from tensorflow.keras import layers
from keras.preprocessing.image import ImageDataGenerator  #keras模型对图片处理时调用的一个库
from tensorflow import keras    #tensorflow下的keras框架
import time

class Ui_MainWindow(object):
    ## 设置管理员界面的UI位置布局及大小
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_title = QLabel(self.centralwidget)
        self.label_title.setGeometry(336, 20, 130,125)
        self.label_title.setObjectName("label_title")
        self.label_title.setStyleSheet('font:25px')
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setGeometry(30, 120, 150, 41)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(30, 180, 160, 41)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(30, 240, 160, 41)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(30, 300, 160, 41)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(30, 360, 160, 41)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(30, 420, 160, 41)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(316, 120, 160, 41)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(570, 120, 160, 41)
        self.pushButton_8.setObjectName("pushButton_8")
        self.label = QLabel(self.centralwidget)
        self.label.setGeometry(250, 170, 481, 291)
        self.label.setObjectName("label")

        self.label_tip = QLabel(self.centralwidget)
        self.label_tip.setGeometry(250, 500, 120, 20)
        self.label_tip.setObjectName("label_tip")
        self.label_tip.setStyleSheet('font:20px')

        self.label_result = QLabel(self.centralwidget)
        self.label_result.setGeometry(400, 500, 300, 20)
        self.label_result.setObjectName("label_tip")
        self.label_result.setStyleSheet('font:20px')



        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(0, 0, 800, 26)
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar =QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "基于Tensorflow的垃圾分类系统"))
        self.label_title.setText(_translate("MainWindow", "管理员系统"))
        self.pushButton.setText(_translate("MainWindow", "打开摄像头"))
        self.pushButton_2.setText(_translate("MainWindow", "添加背景图片"))
        self.pushButton_3.setText(_translate("MainWindow", "添加可回收图片"))
        self.pushButton_4.setText(_translate("MainWindow", " 添加有害垃圾图片"))
        self.pushButton_5.setText(_translate("MainWindow", " 添加餐厨垃圾图片"))
        self.pushButton_6.setText(_translate("MainWindow", "添加其他垃圾图片"))
        self.pushButton_7.setText(_translate("MainWindow", "关闭摄像头"))
        self.pushButton_8.setText(_translate("MainWindow", "训练模型"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><img src=\":/newPrefix/pic/Hint.png\"/><span style=\" font-size:28pt;\">图像显示区域</span><br/></p></body></html>"))
        self.label_tip.setText(_translate("MainWindow","训练耗时:"))
    
    ## 设置槽函数
    def slot_init(self):
        self.pushButton.clicked.connect(self.button_open_camera_click)
        self.timer_camera.timeout.connect(self.show_camera)
        self.pushButton_7.clicked.connect(self.close_camera)
        self.pushButton_2.clicked.connect(self.takePhoto)
        self.pushButton_3.clicked.connect(self.take1Photo)
        self.pushButton_4.clicked.connect(self.take2Photo)
        self.pushButton_5.clicked.connect(self.take3Photo)
        self.pushButton_6.clicked.connect(self.take4Photo)
        self.pushButton_8.clicked.connect(self.running)

    ## 打开摄像头
    def button_open_camera_click(self):
        self.cap = cv2.VideoCapture(1)  # 打开摄像头准备获取图像
        self.CAM_NUM = 1  # 此参数是关于打开摄像头的问题，0：打开电脑内置摄像头，1/2/3：打开外接USB摄像头
        if self.timer_camera.isActive() == False:
            flag = self.cap.open(self.CAM_NUM)
            if flag == False:
                msg = QtWidgets.QMessageBox.warning(
                    self, u"Warning", u"请检测相机与电脑是否连接正确",
                    buttons=QtWidgets.QMessageBox.Ok,
                    defaultButton=QtWidgets.QMessageBox.Ok)
            else:
                self.timer_camera.start(30)

        # self.cap = cv2.VideoCapture(0)  # 打开摄像头准备获取图像
        # # Capture frame-by-frame
        # ret, frame = self.cap.read()
        #
        # show = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # 图像颜色空间转换
        #
        # showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
        # self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
        # self.label.setScaledContents(True)

    ## 图像显示区显示图片
    def show_camera(self):
        flag, self.image = self.cap.read()

        # self.image=cv2.flip(self.image, 1) # 左右翻转
        show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 图像颜色空间转换

        showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
        self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
        self.label.setScaledContents(True)

    ## 关闭摄像头
    def close_camera(self):
        if self.timer_camera.isActive() != False:
            ok = QtWidgets.QPushButton()
            cacel = QtWidgets.QPushButton()

            msg = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, u"关闭", u"是否关闭！")

            msg.addButton(ok,QtWidgets.QMessageBox.ActionRole)
            msg.addButton(cacel, QtWidgets.QMessageBox.RejectRole)
            ok.setText(u'确定')
            cacel.setText(u'取消')

            if msg.exec_() != QtWidgets.QMessageBox.RejectRole:

                if self.cap.isOpened():
                    self.cap.release()
                if self.timer_camera.isActive():
                    self.timer_camera.stop()
                self.label.setText("<html><head/><body><p align=\"center\"><img src=\":/newPrefix/pic/Hint.png\"/><span style=\" font-size:28pt;\">点击打开摄像头</span><br/></p></body></html>")
    ## 添加背景图片
    def takePhoto(self):
        if self.timer_camera.isActive() != False:
            now_time = time.strftime('%Y-%m-%d-%H-%M-%S',time.localtime(time.time())) #获取当前时间
            print(now_time)  #控制台打印当前时间
            cv2.imwrite('./dataset/train/00background/pic_'+str(now_time)+'.png',self.image)  #将图片保存到背景图片文件夹下

            cv2.putText(self.image, 'The picture have saved !',
                        (int(self.image.shape[1]/2-130), int(self.image.shape[0]/2)),
                        cv2.FONT_HERSHEY_SCRIPT_COMPLEX,
                        1.0, (255, 0, 0), 1)

            self.timer_camera.stop()

            show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 左右翻转

            showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.label.setScaledContents(True)

    ## 添加可回收垃圾图片
    def take1Photo(self):
        if self.timer_camera.isActive() != False:
            now_time = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))
            print(now_time)
            cv2.imwrite('./dataset/train/04recycle/pic_' + str(now_time) + '.png', self.image)       #将图片保存到可回收垃圾图片文件夹下

            cv2.putText(self.image, 'The picture have saved !',
                        (int(self.image.shape[1] / 2 - 130), int(self.image.shape[0] / 2)),
                        cv2.FONT_HERSHEY_SCRIPT_COMPLEX,
                        1.0, (255, 0, 0), 1)

            self.timer_camera.stop()

            show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 左右翻转

            showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0],
                                     QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.label.setScaledContents(True)
    ## 添加有害垃圾图片
    def take2Photo(self):
        if self.timer_camera.isActive() != False:
            now_time = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))
            print(now_time)
            cv2.imwrite('./dataset/train/03harm/pic_' + str(now_time) + '.png', self.image)     #将图片保存到有害垃圾图片文件夹下

            cv2.putText(self.image, 'The picture have saved !',
                        (int(self.image.shape[1] / 2 - 130), int(self.image.shape[0] / 2)),
                        cv2.FONT_HERSHEY_SCRIPT_COMPLEX,
                        1.0, (255, 0, 0), 1)

            self.timer_camera.stop()

            show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 左右翻转

            showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0],
                                     QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.label.setScaledContents(True)
    ## 添加餐厨垃圾图片
    def take3Photo(self):
        if self.timer_camera.isActive() != False:
            now_time = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))
            print(now_time)
            cv2.imwrite('./dataset/train/02kitchen/pic_' + str(now_time) + '.png', self.image)   #将图片保存到厨余垃圾图片文件夹下

            cv2.putText(self.image, 'The picture have saved !',
                        (int(self.image.shape[1] / 2 - 130), int(self.image.shape[0] / 2)),
                        cv2.FONT_HERSHEY_SCRIPT_COMPLEX,
                        1.0, (255, 0, 0), 1)

            self.timer_camera.stop()

            show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 左右翻转

            showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.label.setScaledContents(True)
    ## 添加其他垃圾图片
    def take4Photo(self):
        if self.timer_camera.isActive() != False:
            now_time = time.strftime('%Y-%m-%d-%H-%M-%S', time.localtime(time.time()))   #获取当前时间
            print(now_time)     #控制台打印当前时间
            cv2.imwrite('./dataset/train/01otherwise/pic_' + str(now_time) + '.png', self.image)   #将图片保存到其他垃圾图片文件夹下

            cv2.putText(self.image, 'The picture have saved !',
                        (int(self.image.shape[1] / 2 - 130), int(self.image.shape[0] / 2)),
                        cv2.FONT_HERSHEY_SCRIPT_COMPLEX,
                        1.0, (255, 0, 0), 1)

            self.timer_camera.stop()

            show = cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB)  # 左右翻转

            showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0], QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))
            self.label.setScaledContents(True)
    ## 进行模型训练
    def running(self,MainWindow):
        _translate = QtCore.QCoreApplication.translate

        # 添加模型mobel
        t = time.time()

        classifier_url = './model'  # 导入网络模型

        # 定义训练数据与验证数据，大小为224*224
        TRAINING_dir = './dataset/train/'  # 训练集相对路径
        VALIDATION_dir = './dataset/test/'  # 测试集相对路径
        # rescale是重缩放因子，默认为None.如果是None或0，不进行缩放，否则将数据乘以所提供的值
        training_datagen = ImageDataGenerator(rescale=1. / 255)
        validation_datagen = ImageDataGenerator(rescale=1. / 255)

        # 训练集
        train_generator = training_datagen.flow_from_directory(
            TRAINING_dir,
            target_size=(224, 224),
            class_mode='categorical'
        )

        # 验证集
        validation_generator = validation_datagen.flow_from_directory(
            VALIDATION_dir,
            target_size=(224, 224),
            class_mode='categorical'
        )

        # feature_extractor_url = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/2"
        # 载入训练模型
        feature_extractor_layer = hub.KerasLayer(classifier_url,
                                                 input_shape=(224, 224, 3))
        # 定义训练模型
        model = tf.keras.Sequential([
            feature_extractor_layer,
            layers.Dense(train_generator.num_classes, activation='softmax')
        ])
        # 打印模型参数
        model.summary()
        # 设置损失函数，学习率
        model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

        reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor='val_loss', patience=2, mode='auto')
        time_callback = TimeHistory()
        # 模型拟合

        epochs = 4  ## 模型训练时数据迭代的轮数

        history = model.fit_generator(train_generator, epochs=epochs, validation_data=validation_generator, verbose=1,
                                      callbacks=[time_callback])

        ## 界面呈现训练结果
        str1 = str(time_callback.totaltime) + '秒'
        self.label_result.setText(_translate("MainWindow", str1))

        ## 模型保存1
        export_path = "./tmp/" + str(time.strftime("%Y-%m-%d-%H-%M-%S", time.localtime()) ) + "/".format(int(t))
        model.save(export_path, save_format='tf')

        ## reloaded = tf.keras.models.load_model(export_path)



class TimeHistory(keras.callbacks.Callback):
    def on_train_begin(self, logs={}):
        self.times = []
        self.totaltime = time.time()

    def on_train_end(self, logs={}):
        self.totaltime = time.time() - self.totaltime

    def on_epoch_begin(self, batch, logs={}):
        self.epoch_time_start = time.time()

    def on_epoch_end(self, batch, logs={}):
        self.times.append(time.time() - self.epoch_time_start)